// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String              @db.VarChar(50)
  password           String              @db.VarChar(150)
  avatar             String?             @db.VarChar(250)
  lastLoginAt        DateTime?           @map("last_login_at")
  createdAt          DateTime            @default(now()) @map("created_at")
  role               Role                @default(VIEWER)
  createdCompanies   Company[]
  createdDepartments Department[]
  createdEngineers   Engineer[]
  createdProjects    Project[]
  createdPayments    Payment[]
  createdSuspends    Suspend[]
  createdMedia       Media[]
  viewingProjects    ProjectViewer[]
  setting            Setting[]

  @@unique([name])
  @@map("user")
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  excerpt   String?   @db.VarChar(500)
  avatar    String?   @db.VarChar(250)
  createdAt DateTime  @default(now()) @map("created_at")
  projects  Project[]
  creatorId Int       @map("user_id")
  creator   User      @relation(fields: [creatorId], references: [id])

  @@unique([name])
  @@map("company")
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(50)
  excerpt   String?    @db.VarChar(500)
  avatar    String?    @db.VarChar(250)
  createdAt DateTime   @default(now()) @map("created_at")
  creatorId Int        @map("user_id")
  creator   User       @relation(fields: [creatorId], references: [id])
  engineers Engineer[]

  @@unique([name])
  @@map("department")
}

model Engineer {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(50)
  phone        String?    @db.VarChar(50)
  excerpt      String?    @db.VarChar(500)
  avatar       String?    @db.VarChar(250)
  createdAt    DateTime   @default(now()) @map("created_at")
  departmentId Int        @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id])
  projects     Project[]
  creatorId    Int        @map("user_id")
  creator      User       @relation(fields: [creatorId], references: [id])

  @@unique([name, departmentId])
  @@map("engineer")
}

model Project {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  excerpt           String?             @db.VarChar(500)
  remark            String?
  address           String?             @db.VarChar(500)
  locationLongitude Float?              @default(0) @map("location_longitude")
  locationLatitude  Float?              @default(0) @map("location_latitude")
  duration          Int                 @default(0)
  cost              Decimal             @default(0)
  amountPaid        Decimal             @default(0) @map("amount_paid")
  status            Status              @default(WORKING)
  companyId         Int                 @map("company_id")
  company           Company?            @relation(fields: [companyId], references: [id])
  engineerId        Int                 @map("engineer_id")
  engineer          Engineer?           @relation(fields: [engineerId], references: [id])
  creatorId         Int                 @map("user_id")
  creator           User                @relation(fields: [creatorId], references: [id])
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")
  media             Media[]
  payments          Payment[]
  suspends          Suspend[]
  viewers           ProjectViewer[]

  @@unique([name])
  @@map("project")
}

model ProjectViewer {
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId  Int      @map("project_id")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([userId, projectId])
  @@map("project_viewer")
}

model Media {
  id         Int      @id @default(autoincrement())
  src        String   @db.VarChar(500)
  title      String   @db.VarChar(100)
  orderIndex Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  projectId  Int      @map("project_id")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId  Int      @map("user_id")
  creator    User     @relation(fields: [creatorId], references: [id])

  @@map("media")
}

model Payment {
  id          Int      @id @default(autoincrement())
  amount      Decimal  @default(0)
  paidAt      DateTime @default(now()) @map("paid_at")
  description String?  @db.VarChar(500)
  projectId   Int      @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   Int      @map("user_id")
  creator     User     @relation(fields: [creatorId], references: [id])

  @@map("payment")
}

model Suspend {
  id          Int      @id @default(autoincrement())
  fromDate    DateTime @default(now()) @map("from_date")
  toDate      DateTime @map("to_date")
  description String?  @db.VarChar(500)
  projectId   Int      @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   Int      @map("user_id")
  creator     User     @relation(fields: [creatorId], references: [id])

  @@map("suspend")
}

model Setting {
  id     Int     @id @default(autoincrement())
  userId Int?
  key    String  @db.VarChar(100)
  value  String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([key])
  @@map("setting")
}

enum Status {
  WORKING
  STOPPED
  COMPLETED
  LATE
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  VIEWER
}
