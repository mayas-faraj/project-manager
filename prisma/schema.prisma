// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(50)
  password          String          @db.VarChar(150)
  avatar            String?         @db.VarChar(250)
  lastLoginAt       DateTime?       @map("last_login_at")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @map("updated_at") @updatedAt
  role              Role            @default(VIEWER)
  createdProjects   Project[]
  createdPayments   Payment[]
  createdSuspends   Suspend[]
  createdExtensions Extensions[]
  createdMedia      Media[]
  setting           Setting[]

  @@unique([name])
  @@map("user")
}

model Project {
  id                 Int             @id @default(autoincrement())
  name               String          @db.VarChar(50)
  remark             String?         @db.LongText
  longitude          Float?
  latitude           Float?
  companyName        String?         @db.VarChar(50)
  engineerName       String?         @map("engineer_name") @db.VarChar(50)
  engineerPhone      String?         @map("engineer_phone") @db.VarChar(50)
  engineerDepartment String?         @map("engineer_department") @db.VarChar(100)
  avatar             String?         @db.VarChar(500)
  duration           Int             @default(0)
  cost               Decimal         @default(0)
  amountPaid         Decimal         @default(0) @map("amount_paid")
  status             Status          @default(WORKING)
  creatorId          Int             @map("user_id")
  creator            User            @relation(fields: [creatorId], references: [id])
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @map("updated_at") @updatedAt
  media              Media[]
  payments           Payment[]
  suspends           Suspend[]
  extensions         Extensions[]

  @@unique([name])
  @@map("project")
}

model Media {
  id         Int      @id @default(autoincrement())
  src        String   @db.VarChar(500)
  title      String   @db.VarChar(100) 
  orderIndex Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  projectId  Int      @map("project_id")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId  Int      @map("user_id")
  creator    User     @relation(fields: [creatorId], references: [id])

  @@map("media")
}

model Payment {
  id          Int      @id @default(autoincrement())
  amount      Decimal  @default(0)
  paidAt      DateTime @default(now()) @map("paid_at")
  description String?  @db.VarChar(500)
  projectId   Int      @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   Int      @map("user_id")
  creator     User     @relation(fields: [creatorId], references: [id])

  @@map("payment")
}

model Suspend {
  id          Int      @id @default(autoincrement())
  fromDate    DateTime @default(now()) @map("from_date")
  toDate      DateTime @map("to_date")
  description String?  @db.VarChar(500)
  documentUrl String?
  projectId   Int      @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   Int      @map("user_id")
  creator     User     @relation(fields: [creatorId], references: [id])

  @@map("suspend")
}

model Extensions {
  id          Int     @id @default(autoincrement())
  byDuration  Int     @default(0)
  description String? @db.VarChar(500)
  documentUrl String?
  projectId   Int     @map("project_id")
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creatorId   Int     @map("user_id")
  creator     User    @relation(fields: [creatorId], references: [id])

  @@map("extensions")
}

model Setting {
  id     Int     @id @default(autoincrement())
  userId Int?
  key    String  @db.VarChar(100)
  value  String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([key])
  @@map("setting")
}

enum Status {
  WORKING
  STOPPED
  COMPLETED
  LATE
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  VIEWER
}
